// This is your Prisma schema file, defining the data models and relationships.
// Learn more about Prisma schema here: https://pris.ly/d/prisma-schema

// Generator configuration for the Prisma Client, which generates a JavaScript/TypeScript ORM client
generator client {
  provider = "prisma-client-js"
}

// Datasource configuration for connecting to the PostgreSQL database
datasource db {
  provider = "postgresql" // Specifies PostgreSQL as the database provider
  url      = env("DATABASE_URL") // Database connection URL from environment variables
}

// Enum for user roles
enum userRole {
  ADMIN  // Admin role
  VENDOR // Vendor role
}

// User model representing application users
model User {
  id          String   @id @unique // Unique identifier for the user
  email       String   @unique // Unique email for user login
  vendorName  String // Name of the vendor (if applicable)
  password    String // Password for user authentication
  role        userRole @default(VENDOR) // Role of the user, defaults to VENDOR
  phoneNumber String // Phone number of the user
  vendorId    String   @unique // Unique identifier for vendor accounts
  createdAt   DateTime @default(now()) // Timestamp when the user is created
  updatedAt   DateTime @updatedAt // Timestamp when the user is last updated
  plan        Plan?    @relation(fields: [planId], references: [id]) // Relation to the Plan model
  planId      String? // Foreign key to reference the Plan model
}

// Plan model representing subscription plans
model Plan {
  id        String        @id @unique @default(uuid()) // Unique identifier for the plan
  name      String        @unique // Name of the plan
  features  String // Plan features stored as JSON or text
  price     Decimal // Price of the plan
  createdAt DateTime      @default(now()) // Timestamp when the plan is created
  users     User[] // One-to-many relation with the User model
  services  PlanService[] @relation("PlanToPlanService") // One-to-many relation with PlanService
}

// Service model representing available services
model Service {
  id          String        @id @unique @default(uuid()) // Unique identifier for the service
  name        String // Name of the service
  description String // Description of the service
  plans       PlanService[] @relation("ServiceToPlanService") // One-to-many relation with PlanService
  createdAt   DateTime      @default(now()) // Timestamp when the service is created
}

// PlanService model to establish a many-to-many relationship between Plan and Service
model PlanService {
  id        String   @id @unique @default(uuid()) // Unique identifier for the relationship
  plan      Plan     @relation(fields: [planId], references: [id], name: "PlanToPlanService") // Relation to Plan
  planId    String // Foreign key to reference the Plan model
  service   Service  @relation(fields: [serviceId], references: [id], name: "ServiceToPlanService") // Relation to Service
  serviceId String // Foreign key to reference the Service model
  createdAt DateTime @default(now()) // Timestamp when the relationship is created
}

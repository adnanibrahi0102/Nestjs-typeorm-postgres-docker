// This is your Prisma schema file, defining the data models and relationships.
// Learn more about Prisma schema here: https://pris.ly/d/prisma-schema

// Generator configuration for the Prisma Client, which generates a JavaScript/TypeScript ORM client
generator client {
  provider = "prisma-client-js"
}

// Datasource configuration for connecting to the PostgreSQL database
datasource db {
  provider = "postgresql" // Specifies PostgreSQL as the database provider
  url      = env("DATABASE_URL") // Database connection URL from environment variables
}

// Enum for user roles
enum userRole {
  ADMIN  // Admin role
  VENDOR // Vendor role
}

// User model representing application users
model User {
  id          String   @id @unique // Unique identifier for the user
  email       String   @unique // Unique email for user login
  vendorName  String // Name of the vendor (if applicable)
  password    String // Password for user authentication
  role        userRole @default(VENDOR) // Role of the user, defaults to VENDOR
  phoneNumber String // Phone number of the user
  vendorId    String   @unique // Unique identifier for vendor accounts
  createdAt   DateTime @default(now()) // Timestamp when the user is created
  updatedAt   DateTime @updatedAt // Timestamp when the user is last updated
  plan        Plan?    @relation(fields: [planId], references: [id]) // Relation to the Plan model
  planId      String? // Foreign key to reference the Plan model
  // One-to-Many Relationship: One User can have multiple Properties
  properties  HotelProperty[]  // A user can own multiple properties
  
}

// Plan model representing subscription plans
model Plan {
  id        String        @id @unique @default(uuid()) // Unique identifier for the plan
  name      String        @unique // Name of the plan
  features  String // Plan features stored as JSON or text
  price     Decimal // Price of the plan
  createdAt DateTime      @default(now()) // Timestamp when the plan is created
  users     User[] // One-to-many relation with the User model
  services  PlanService[] @relation("PlanToPlanService") // One-to-many relation with PlanService
}

// Service model representing available services
model Service {
  id          String        @id @unique @default(uuid()) // Unique identifier for the service
  name        String // Name of the service
  description String // Description of the service
  plans       PlanService[] @relation("ServiceToPlanService") // One-to-many relation with PlanService
  createdAt   DateTime      @default(now()) // Timestamp when the service is created
}

// PlanService model to establish a many-to-many relationship between Plan and Service
model PlanService {
  id        String   @id @unique @default(uuid()) // Unique identifier for the relationship
  plan      Plan     @relation(fields: [planId], references: [id], name: "PlanToPlanService") // Relation to Plan
  planId    String // Foreign key to reference the Plan model
  service   Service  @relation(fields: [serviceId], references: [id], name: "ServiceToPlanService") // Relation to Service
  serviceId String // Foreign key to reference the Service model
  createdAt DateTime @default(now()) // Timestamp when the relationship is created
}

model HotelProperty {
  id                String    @id @unique @default(uuid())
  hotelName         String
  hotelAddress      String
  city              String
  state             String
  zipCode           String
  country           String    @default("India")  // Default for Kashmir-focused platform
  phoneNumber       String
  email             String    @unique
  websiteURL        String?  
  logo              String?   // URL to image storage (S3/Cloudinary)
  description       String
  hotelImages       String[]  // Array of image URLs
  uniqueIdentificationPhotoCopy String  
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  propertyRooms        Room[]   
  checkInTime       String    @default("14:00")
  checkOutTime      String    @default("12:00")
  latitude          Float?  
  longitude         Float?
  socialMedia       Json?   
  avgRating         Float?    @default(0.0)    
  reviews           Review[] 
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Indexes for common search filters 
  @@index([city])
  @@index([state])
  @@index([country])
  @@index([avgRating])
}


// New supporting models
model Room {
  id              String   @id @unique @default(uuid())
  type            String   // "Deluxe Room", "Family Suite"
  description     String
  pricePerNight   Decimal
  capacity        Int      @default(2)
  amenities       String[] // ["TV", "AC", "Minibar"]
  images          String[] 
  cancellationPolicy String?  // Free text or predefined options
  hotelProperty   HotelProperty @relation(fields: [hotelId], references: [id])
  hotelId         String
  createdAt       DateTime @default(now())
}

model Review {
  id              String   @id @unique @default(uuid())
  rating          Int     @default(0)
  comment         String?
  guestName       String
  guestEmail      String
  hotelProperty   HotelProperty @relation(fields: [hotelId], references: [id])
  hotelId         String
  createdAt       DateTime @default(now())
}